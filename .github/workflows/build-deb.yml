name: Build Debian Package

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build on ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
          - arch: i386
            platform: linux/386

    outputs:
      package_name: ${{ steps.package_info.outputs.name }}
      package_version: ${{ steps.package_info.outputs.version }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/386

      - name: Install build tools on runner
        run: sudo apt-get update && sudo apt-get install -y dpkg-dev

      - name: Extract package info from changelog
        id: package_info
        run: |
          PKG_NAME=$(dpkg-parsechangelog -S Source)
          PKG_VERSION=$(dpkg-parsechangelog -S Version | cut -d- -f1)
          echo "name=$PKG_NAME" >> $GITHUB_OUTPUT
          echo "version=$PKG_VERSION" >> $GITHUB_OUTPUT
          
      - name: Build and Lint Debian Package
        env:
          PACKAGE: ${{ steps.package_info.outputs.name }}
          VERSION: ${{ steps.package_info.outputs.version }}
        run: |
          docker run --rm --privileged \
            -e PACKAGE -e VERSION \
            --platform ${{ matrix.platform }} \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            debian:bookworm \
            bash -euc '
              set -x

              echo "##[group]1. Install Dependencies"
              apt-get update
              DEBIAN_FRONTEND=noninteractive apt-get install -y \
                git dpkg-dev debhelper build-essential lintian \
                libx11-dev libimlib2-dev libxpm-dev libxrandr-dev libxinerama-dev \
                libxft-dev fontconfig-config pkg-config
              echo "##[endgroup]"

              echo "##[group]2. Clone Upstream Source"
              mkdir -p build
              git clone --branch v${VERSION} https://github.com/Tomas-M/xlunch.git build/${PACKAGE}-${VERSION}
              echo "##[endgroup]"

              echo "##[group]3. Create .orig.tar.gz"
              tar -C build --create --gzip --file build/${PACKAGE}_${VERSION}.orig.tar.gz ${PACKAGE}-${VERSION}
              echo "##[endgroup]"

              echo "##[group]4. Add debian/ Directory"
              cp -r debian build/${PACKAGE}-${VERSION}/
              echo "##[endgroup]"

              echo "##[group]5. Build Package"
              cd build/${PACKAGE}-${VERSION}
              dpkg-buildpackage -us -uc
              echo "##[endgroup]"

              echo "##[group]6. Run Lintian Check"
              cd ..
              LINTIAN_OUTPUT=$(lintian --show-overrides ${PACKAGE}_*.changes)
              echo "${LINTIAN_OUTPUT}"
              if echo "${LINTIAN_OUTPUT}" | grep -q "^E:"; then
                echo "::error::Lintian reported errors. Build failed."
                exit 1
              fi
              echo "##[endgroup]"
            '

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deb-packages-${{ matrix.arch }}
          path: |
            build/*.deb
            build/*.dsc
            build/*.orig.tar.gz
            build/*.debian.tar.*
            build/*.changes
            build/*.buildinfo

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/deb-packages-*/*.deb
          generate_release_notes: true